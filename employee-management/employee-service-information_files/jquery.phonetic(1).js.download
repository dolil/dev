(function ($) {
    $.fn.phonetic = function (options) {
        var phonetic = new Array();

        phonetic['k'] = '\u0995'; // ko
        phonetic['0'] = '\u09e6'; //'০'; 
        phonetic['1'] = '\u09e7'; //'১';
        phonetic['2'] = '\u09e8'; //'২';
        phonetic['3'] = '\u09e9'; //'৩';
        phonetic['4'] = '\u09ea'; //'৪';
        phonetic['5'] = '\u09eb'; //'৫';
        phonetic['6'] = '\u09ec'; //'৬';
        phonetic['7'] = '\u09ed'; //'৭';
        phonetic['8'] = '\u09ee'; //'৮';
        phonetic['9'] = '\u09ef'; //'৯';

        phonetic['i'] = '\u09BF'; // hrossho i kar
        phonetic['I'] = '\u0987'; // hrossho i
        phonetic['ii'] = '\u09C0'; // dirgho i kar
        phonetic['II'] = '\u0988'; // dirgho i
        phonetic['e'] = '\u09C7'; // e kar
        phonetic['E'] = '\u098F'; // E
        phonetic['U'] = '\u0989'; // hrossho u
        phonetic['u'] = '\u09C1'; // hrossho u kar
        phonetic['uu'] = '\u09C2'; // dirgho u kar
        phonetic['UU'] = '\u098A'; // dirgho u
        phonetic['r'] = '\u09B0'; // ro
        phonetic['WR'] = '\u098B'; // wri
        phonetic['a'] = '\u09BE'; // a kar
        phonetic['A'] = '\u0986'; // shore a
        phonetic['ao'] = '\u0985'; // shore o
        phonetic['s'] = '\u09B8'; // dontyo so
        phonetic['t'] = '\u099f'; // to
        phonetic['K'] = '\u0996'; // Kho

        phonetic['kh'] = '\u0996'; // kho

        phonetic['n'] = '\u09A8'; // dontyo no
        phonetic['N'] = '\u09A3'; // murdhonyo no
        phonetic['T'] = '\u09A4'; // tto
        phonetic['Th'] = '\u09A5'; // ttho

        phonetic['d'] = '\u09A1'; // ddo
        phonetic['dh'] = '\u09A2'; // ddho

        phonetic['b'] = '\u09AC'; // bo
        phonetic['bh'] = '\u09AD'; // bho
        phonetic['v'] = '\u09AD'; // bho
        phonetic['R'] = '\u09DC';  // doye bindu ro
        phonetic['Rh'] = '\u09DD';  // dhoye bindu ro
        phonetic['g'] = '\u0997'; // go
        phonetic['G'] = '\u0998'; // gho

        phonetic['gh'] = '\u0998'; // gho

        phonetic['h'] = '\u09B9'; // ho
        phonetic['NG'] = '\u099E'; // yo
        phonetic['j'] = '\u099C'; // borgio jo
        phonetic['J'] = '\u099D'; // jho
        phonetic['jh'] = '\u099D'; // jho
        phonetic['c'] = '\u099A'; //  cho
        phonetic['ch'] = '\u099B'; // cho
        phonetic['C'] = '\u099B'; // ccho
        phonetic['th'] = '\u09A0'; // tho
        phonetic['p'] = '\u09AA'; // po
        phonetic['f'] = '\u09AB'; // fo
        phonetic['ph'] = '\u09AB'; // fo
        phonetic['D'] = '\u09A6'; // do
        phonetic['Dh'] = '\u09A7'; // dho

        phonetic['z'] = '\u09AF'; // ontoshyo zo
        phonetic['y'] = '\u09DF'; // ontostho yo
        phonetic['Ng'] = '\u0999'; // Uma
        phonetic['ng'] = '\u0982'; // uniswor
        phonetic['l'] = '\u09B2'; // lo
        phonetic['m'] = '\u09AE'; // mo
        phonetic['sh'] = '\u09B6'; // talobyo sho
        phonetic['S'] = '\u09B7'; // mordhonyo sho
        phonetic['O'] = '\u0993'; //'\u09CB'; // o
        phonetic['ou'] = '\u099C'; // ou kar
        phonetic['OU'] = '\u0994'; // OU
        phonetic['Ou'] = '\u0994'; // OU
        phonetic['Oi'] = '\u0990'; // OU
        phonetic['OI'] = '\u0990'; // OU
        phonetic['tt'] = '\u09CE'; // tto
        phonetic['H'] = '\u0983'; // bisworgo
        phonetic["."] = "\u0964"; // dari
        phonetic[".."] = "."; // fullstop
        phonetic['HH'] = '\u09CD' + '\u200c'; // hosonto
        phonetic['NN'] = '\u0981'; // chondrobindu
        phonetic['Y'] = '\u09CD' + '\u09AF'; // jo fola
        phonetic['w'] = '\u09CD' + '\u09AC'; // wri kar
        phonetic['W'] = '\u09C3'; // wri kar
        phonetic['wr'] = '\u09C3'; // wri kar
        phonetic['x'] = "\u0995" + '\u09CD' + '\u09B8';
        phonetic['rY'] = phonetic['r'] + '\u200D' + '\u09CD' + '\u09AF';
        phonetic['L'] = phonetic['l'];
        phonetic['Z'] = phonetic['z'];
        phonetic['P'] = phonetic['p'];
        phonetic['V'] = phonetic['v'];
        phonetic['B'] = phonetic['b'];
        phonetic['M'] = phonetic['m'];
        phonetic['V'] = phonetic['v'];
        phonetic['X'] = phonetic['x'];
        phonetic['V'] = phonetic['v'];
        phonetic['F'] = phonetic['f'];
        phonetic['vowels'] = 'aIiUuoiiouueEiEu'; //dont change this pattern


        function phonectic() {
            var carry = '', oldLen = 0, ctrl = false, carry2, shift,
                switched = false, lastcarry = "", bangla, tempBangla,
                checkKeyDown = function (evnt) {
                    var e = evnt.which;
                    //track the control key
                    if (e == '17') {
                        ctrl = true;
                    }
                    //track the shift key
                    else if (e == 16) {
                        shift = true;
                    }
                    //track the ctrl+q  key
                    if (e == '81') {
                        //switch the keyboard mode
                        if (ctrl) {
                            switched = !switched;
                        }
                    }
                    return true;
                },
                checkKeyUp = function (evnt) {
                    //just track the control key
                    if (evnt.which == '17') {
                        ctrl = false;
                    }
                },
                parsePhonetic = function (evnt) {
                    var charE;
                    var e = evnt.which; // get the keycode
                    if (e == '81') {
                        return true;
                    }

                    if (switched) return true;

                    if (ctrl) {
                        // user is pressing control, so leave the parsing
                        e = 0;
                    }

                    if (shift) {
                        charE = String.fromCharCode(e).toUpperCase(); // get the character equivalent to this keycode
                        shift = false;
                    } else
                        charE = String.fromCharCode(e); // get the character equivalent to this keycode

                    if (e == 8 || e == 32) {
                        // if space is pressed we have to clear the carry. otherwise there will be some malformed conjunctions
                        carry = " ";
                        return oldLen = 1;
                    }

                    lastcarry = carry;
                    carry += "" + charE; //append the current character pressed to the carry

                    //the intellisense
                    if ((phonetic['vowels'].indexOf(lastcarry) != -1 && phonetic['vowels'].indexOf(charE) != -1) || (lastcarry == " " && phonetic['vowels'].indexOf(charE) != -1)) {
                        //let's check for dhirgho i kar and dhirgho u kar :P		
                        if (carry == 'ii' || carry == 'uu') {
                            carry = lastcarry + charE;
                        } else {
                            charE = charE.toUpperCase();
                            carry = lastcarry + charE;
                        }
                    }
                    //intellisense ended

                    bangla = parsePhoneticCarry.call(this, carry); // get the combined equivalent
                    tempBangla = parsePhoneticCarry(charE); // get the single equivalent

                    if (tempBangla == ".." || bangla == "..") //that means it has next sibling
                    {
                        return false;
                    }
                    //alert(carry);
                    if (charE == "+" || charE == "=" || charE == "`") {
                        if (carry == "++" || carry == "==" || carry == "``") {
                            // check if it is a plus/equal/accent  key/sign
                            insertConjunction.call(this, charE, oldLen);
                            oldLen = 1;
                            return false;
                        }
                        //otherwise this is a simple joiner
                        insertAtCursor.call(this, "\u09CD");
                        oldLen = 1;
                        carry2 = carry;
                        carry = charE;
                        return false;
                    } else if (oldLen == 0) //first character
                    {
                        // this is first time someone press a character
                        insertConjunction.call(this, bangla, 1);
                        oldLen = 1;
                        return false;

                    }
                    else if (carry == "Ao") {
                        // its a shore o
                        insertConjunction.call(this, parsePhoneticCarry("ao"), oldLen);
                        oldLen = 1;
                        return false;
                    } else if (carry == "ii") {
                        // process dirgho i kar
                        //alert('dirgho i kar');
                        insertConjunction.call(this, phonetic['ii'], 1);
                        oldLen = 1;
                        return false;
                    } else if (carry == "oI") {
                        //oi kar
                        insertConjunction.call(this, '\u09C8', oldLen); //same treatment like ou kar (By manchu)
                        oldLen = 1;
                        return false;
                    } else if (charE == "o") {
                        oldLen = 1;
                        insertAtCursor.call(this, '\u09CB');
                        carry = "o";
                        return false;
                    } else if (carry == "oU") {
                        // ou kar
                        insertConjunction.call(this, "\u09CC", oldLen);
                        oldLen = 1;
                        return false;
                    } else if ((bangla == "" && tempBangla != "")) //that means it has no joint equivalent
                    {

                        // there is no joint equivalent - so show the single equivalent. 
                        bangla = tempBangla;
                        if (bangla == "") {
                            // there is no available equivalent - leave as is
                            return carry = "";
                        } else {
                            // found one equivalent
                            carry = charE;
                            insertAtCursor.call(this, bangla);
                            oldLen = bangla.length;
                            return false;
                        }
                    } else if (bangla != "")//joint equivalent found 
                    {
                        // we have found some joint equivalent process it

                        insertConjunction.call(this, bangla, oldLen);
                        oldLen = bangla.length;
                        return false;
                    }
                },
                reset = function () {
                    carry = '';
                    oldLen = 0;
                    ctrl = false;
                    shift = false;
                    carry2 = "";
                    switched = false;
                    lastcarry = "";
                };

            function parsePhoneticCarry(code) {
                //this function just returns a bangla equivalent for a given keystroke
                //or a conjunction
                //just read the array - if found then return the bangla eq.
                //otherwise return a null value
                if (!phonetic[code])  //Oh my god :-( no bangla equivalent for this keystroke
                {
                    return ''; //return a null value
                }
                else {
                    return (phonetic[code]);  //voila - we've found bangla equivalent
                }

            }


            function insertAtCursor(myValue) {
                /**
                * this function inserts a character at the current cursor position in a text area
                * many thanks to alex king and phpMyAdmin for this cool function
                * 
                * This function is originally found in phpMyAdmin package and modified by Hasin Hayder to meet the requirement
                */
                //var myField = document.getElementById(activeta);
                var myField = this;
                if (document.selection) {
                    myField.focus();
                    sel = document.selection.createRange();
                    sel.text = myValue;
                    sel.collapse(true);
                    sel.select();
                }
                //MOZILLA/NETSCAPE support
                else if (myField.selectionStart || myField.selectionStart == 0) {

                    var startPos = myField.selectionStart;
                    var endPos = myField.selectionEnd;
                    var scrollTop = myField.scrollTop;
                    startPos = (startPos == -1 ? myField.value.length : startPos);
                    myField.value = myField.value.substring(0, startPos)
                        + myValue + myField.value.substring(endPos, myField.value.length);
                    myField.focus();
                    myField.selectionStart = startPos + myValue.length;
                    myField.selectionEnd = startPos + myValue.length;
                    myField.scrollTop = scrollTop;
                } else {
                    var scrollTop = myField.scrollTop;
                    myField.value += myValue;
                    myField.focus();
                    myField.scrollTop = scrollTop;
                }
            }

            function insertConjunction(myValue, len) {
                /**
                * this function inserts a conjunction and removes previous single character at the current cursor position in a text area
                * 
                * This function is derived from the original one found in phpMyAdmin package and modified by Hasin to meet our need
                */
                //alert(len);
                //var myField = document.getElementById(activeta);
                var myField = this, scrollTop;
                if (document.selection) {
                    myField.focus();
                    sel = document.selection.createRange();
                    if (myField.value.length >= len) {  // here is that first conjunction bug in IE, if you use the > operator
                        sel.moveStart('character', -1 * (len));
                        //sel.moveEnd('character',-1*(len-1));
                    }
                    sel.text = myValue;
                    sel.collapse(true);
                    sel.select();
                }
                //MOZILLA/NETSCAPE support
                else if (myField.selectionStart || myField.selectionStart == 0) {
                    myField.focus();
                    var startPos = myField.selectionStart - len;
                    var endPos = myField.selectionEnd;
                    scrollTop = myField.scrollTop;
                    startPos = (startPos == -1 ? myField.value.length : startPos);
                    myField.value = myField.value.substring(0, startPos)
		+ myValue
		+ myField.value.substring(endPos, myField.value.length);
                    myField.focus();
                    myField.selectionStart = startPos + myValue.length;
                    myField.selectionEnd = startPos + myValue.length;
                    myField.scrollTop = scrollTop;
                } else {
                    scrollTop = myField.scrollTop;
                    myField.value += myValue;
                    myField.focus();
                    myField.scrollTop = scrollTop;
                }
                //document.getElementById("len").innerHTML = len;
            }

            return { checkKeyDown: checkKeyDown, checkKeyUp: checkKeyUp, paresPhonetic: parsePhonetic, reset: reset };
        }

        return this.each(function () {
            var el = $(this);

            var functionality = el.data('phonetic') || phonectic();

            if (typeof (options) === "string" && options === "destroy") {
                el.unbind('keypress', functionality.parsePhonetic);
                el.unbind('keydown', functionality.checkKeyDown);
                el.unbind('keyup', functionality.checkKeyUp);
                functionality.reset();
                return el.removeData("phonetic");
            } else {
                el.bind('keypress', functionality.parsePhonetic);
                el.bind('keydown', functionality.checkKeyDown);
                el.bind('keyup', functionality.checkKeyUp);
            }

            el.data('phonetic', functionality);
        });
    };
})(jQuery);
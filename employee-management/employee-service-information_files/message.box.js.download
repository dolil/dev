/// <reference path="../jquery-1.6.2.js" />
/// <reference path="ibas.pp.jquery.extension.js" />
/// <reference path="../jquery-ui-1.8.11.js" />


jQuery.fn.processServerMessage = function (callBack, okCallback, yesCallback, noCallback) {
    try {
        var serverData = this[0];

        switch (serverData.FLAG) {
            case '0':
                MessageBox(serverData.MSG, 'Information', 'OK', $.isFunction(okCallback) ? okCallback : null, $.isFunction(yesCallback) ? yesCallback : null, $.isFunction(noCallback) ? noCallback : null);
                if (callBack != null) {
                    callBack(true);
                }
                break;
            case '1':
                MessageBox(serverData.MSG, 'Error', 'OK', $.isFunction(okCallback) ? okCallback : null, $.isFunction(yesCallback) ? yesCallback : null, $.isFunction(noCallback) ? noCallback : null);
                if (callBack != null) {
                    callBack(false);
                }
                break;
            case '-1':
                MessageBox(serverData.MSG, 'Server Exception', 'OK', $.isFunction(okCallback) ? okCallback : null, $.isFunction(yesCallback) ? yesCallback : null, $.isFunction(noCallback) ? noCallback : null);
                if (callBack != null) {
                    callBack(false);
                }
                break;
            case '2':
                var messageBlock = '<p>';
                $.each(serverData.MSG, function (key, value) {
                    messageBlock = messageBlock + ' ' + value + '</br>';
                });
                messageBlock = messageBlock + '</p>';
                MessageBox(messageBlock, 'Validation Failed', 'OK', $.isFunction(okCallback) ? okCallback : null, $.isFunction(yesCallback) ? yesCallback : null, $.isFunction(noCallback) ? noCallback : null);
                if (callBack != null) {
                    callBack(false);
                }
                break;
            default:
                MessageBox(serverData.MSG, 'Error', 'OK', $.isFunction(okCallback) ? okCallback : null, $.isFunction(yesCallback) ? yesCallback : null, $.isFunction(noCallback) ? noCallback : null);
                if (callBack != null) {
                    callBack(false);
                }
                break;
        }
    } catch (err) {
        alert(err.message);
    }
};

jQuery.fn.adjustMessageBoxHeightWidth = function () {
    var ShowScroll = true;
    if ($(this).height() >= $(window).height()) {
        $(this).css({ 'height': $(window).height() + 'px' });
        ShowScroll = false;
    }
    if ($(this).width() >= $(window).width()) {
        $(this).css({ 'width': $(window).width() + 'px' });
        ShowScroll = false;
    }
};

jQuery.fn.setMessageBoxContainerHeightWidth = function () {
    $(this).css({ 'height': $(window).height() + 'px' });
    $(this).css({ 'width': $(window).width() + 'px' });
};

jQuery.fn.centerMessageBox = function () {
    var lParenHeight = $(this).parent().height();
    var lParenWidth = $(this).parent().width();
    var lThisHeight = $(this).height();
    var lThisWidth = $(this).width();

    if (lParenHeight > lThisHeight || lParenWidth > lThisWidth) {
        $(this).css({ 'position': 'fixed' });
        var lTop = '';
        var lLeft = '';
        lTop = (lParenHeight - lThisHeight) / 2 + 'px';
        lLeft = (lParenWidth - lThisWidth) / 2 + 'px';
        $(this).css('top', lTop);
        $(this).css('left', lLeft);
    }
};

function MessageBox(_Message, _MessageTitle, _Button, _OKMethod, _YesMethod, _NoMethod, _isBangla) {
    _isBangla = _isBangla || false;
    if ($('#tblMessage').length > 0) return;

    var defaultErrMsgType = ['error', 'server exception', 'validation failed'];
    _MessageTitle = ($.inArray(_MessageTitle.toLowerCase(), defaultErrMsgType) == -1) ? _MessageTitle : 'Error';
    var defaultMsgType = ['error', 'warning', 'information', 'confirmation'];
    _MessageTitle = ($.inArray(_MessageTitle.toLowerCase(), defaultMsgType) == -1) ? 'Information' : _MessageTitle;
    var lModalBackground = '';
    var lMessageTable = '';
    var lButton = '';
    var lBlockExecution = true;
    lModalBackground = lModalBackground + '<div id="divModalBackground"></div>';

    if (_Button == 'YesNo') {
        if (!_isBangla) {
            lButton = '<input id="btnMessageYes" type="button" value="Yes" /><input id="btnMessageNo" type="button" value="No" />';
        } else {
            lButton = '<input id="btnMessageYes" type="button" value="হ্যাঁ" /><input id="btnMessageNo" type="button" value="না" />';
        }
    } else if (_Button == 'OK') {
        if (!_isBangla) {
            lButton = '<input id="btnMessageOK" type="button" value="OK" />';
        } else {
            lButton = '<input id="btnMessageOK" type="button" value="ঠিক আছে" />';
        }
    }

    lMessageTable = lMessageTable + '<div id="tblMessageContainer">';
    lMessageTable = lMessageTable + '<table id="tblMessage"><thead><tr>';
    lMessageTable = lMessageTable + '<th>' + _MessageTitle + '</th><th class="close" style="width:1px;"><span style="font-size: 23px;cursor: default;">×</span></th>';
    lMessageTable = lMessageTable + '</tr></thead><tbody><tr>';
    lMessageTable = lMessageTable + '<td colspan="2"><table width="100%"><tr><td align="center" width="30px"><div class="messagediv"><img src="' + appRoot + '/Images/' + _MessageTitle.toLowerCase() + 'icon.png" width="24"/></div></td><td style="text-align:left;"><div class="messagediv">' + _Message + '</div></td></tr></table></td>';
    lMessageTable = lMessageTable + '</tr><tr>';
    lMessageTable = lMessageTable + '<td colspan="2">' + lButton + '</td>';
    lMessageTable = lMessageTable + '</tr></tbody></table>';
    lMessageTable = lMessageTable + '</div>';

    $(document.body).append(lModalBackground);
    $(document.body).append(lMessageTable);

    if (_Button == 'OK') {
        $('#btnMessageOK').unbind('click').click(function () {
            $('#tblMessageContainer').remove();
            $('#divModalBackground').remove();
            if (_OKMethod != null) {
                _OKMethod();
            }
        });
    } else if (_Button == 'YesNo') {
        $('#btnMessageNo').unbind('click').click(function () {
            $('#tblMessageContainer').remove();
            $('#divModalBackground').remove();
            if (_NoMethod != null) {
                _NoMethod();
            }
        });
        $('#btnMessageYes').unbind('click').click(function () {
            try {
                $('#tblMessageContainer').remove();
                $('#divModalBackground').remove();
                if (_YesMethod != null) {
                    _YesMethod();
                }
            } catch (err) { alert(err.Message); }
        });
    }

    $('#tblMessageContainer #tblMessage .close').click(function () {
        $('#tblMessageContainer').remove();
        $('#divModalBackground').remove();
    });

    $('#divModalBackground').addClass('ModalBackground');
    $('#tblMessageContainer').addClass('MessageDiv');
    $('#tblMessage').addClass('MessageTable');
    $('#tblMessage').centerMessageBox();
    $('#tblMessage').draggable({ handle: 'thead' });

    if ($('#btnMessageOK').length > 0) {
        $('#btnMessageOK').focus();
    } else {
        $('#btnMessageYes').focus();
    }

    $('#tblMessageContainer').css('z-index', 999999);

    return;
}

function MsgBox(options) {
    var defaults = {
        message: null,
        messageTitle: 'Information',
        button: 'OK',
        okMethod: null,
        yesMethod: null,
        noMethod: null,
        isBangla: false
    };

    options = $.extend(defaults, options);

    MessageBox(options.message, options.messageTitle, options.button, options.okMethod, options.yesMethod, options.noMethod, options.isBangla);
}

var PopupButtonType = { NONE: 0, OK: 1, OKCancel: 2, YesNo: 3, DoneCancel: 4 };

function PopupBox(PopupContent, PopupTitle, PopupButton, OKCallBack, CancelCallBack, YesCallBack, NoCallBack, DoneCallBack) {
    var lModalBackground = '';
    var lMessageTable = '';
    var lButton = '';
    var lBlockExecution = true;

    lModalBackground = lModalBackground + '<div id="divModalBackground"></div>';

    switch (PopupButton) {
        case PopupButtonType.NONE:
            lButton = '';
            break;
        case PopupButtonType.OK:
            lButton = lButton + '<input id="btnMessageOK" type="button" value="OK" />';
            break;
        case PopupButtonType.OKCancel:
            lButton = lButton + '<input id="btnMessageOK" type="button" value="OK" />';
            lButton = lButton + '<input id="btnMessageCancel" type="button" value="Cancel" />';
            break;
        case PopupButtonType.YesNo:
            lButton = lButton + '<input id="btnMessageYes" type="button" value="Yes" />';
            lButton = lButton + '<input id="btnMessageNo" type="button" value="No" />';
            break;
        case PopupButtonType.DoneCancel:
            lButton = lButton + '<input id="btnMessageDone" type="button" value="Done" />';
            lButton = lButton + '<input id="btnMessageCancel" type="button" value="Cancel" />';
            break;
        default:
            throw new Error("Popup Button Type not found");
    }

    lMessageTable = lMessageTable + '<div id="tblMessageContainer">';
    lMessageTable = lMessageTable + '<table id="tblMessage"><thead><tr>';
    lMessageTable = lMessageTable + '<th>' + PopupTitle + '</th>';
    lMessageTable = lMessageTable + '</tr></thead><tbody><tr>';
    lMessageTable = lMessageTable + '<td>' + PopupContent + '</td>';
    lMessageTable = lMessageTable + '</tr><tr>';
    lMessageTable = lMessageTable + '<td>' + lButton + '</td>';
    lMessageTable = lMessageTable + '</tr></tbody></table>';
    lMessageTable = lMessageTable + '</div>';

    $(document.body).append(lModalBackground);
    $(document.body).append(lMessageTable);


    switch (PopupButton) {
        case PopupButtonType.NONE:
            break;
        case PopupButtonType.OK:
            $('#btnMessageOK').unbind('click').click(function () {
                $('#tblMessageContainer').remove();
                $('#divModalBackground').remove();
                if (OKCallBack != null) {
                    OKCallBack();
                }
            });
            break;
        case PopupButtonType.OKCancel:
            $('#btnMessageOK').unbind('click').click(function () {
                $('#tblMessageContainer').remove();
                $('#divModalBackground').remove();
                if (OKCallBack != null) {
                    OKCallBack();
                }
            });
            $('#btnMessageCancel').unbind('click').click(function () {
                $('#tblMessageContainer').remove();
                $('#divModalBackground').remove();
                if (OKCallBack != null) {
                    OKCallBack();
                }
            });
            break;
        case PopupButtonType.YesNo:
            $('#btnMessageYes').unbind('click').click(function () {
                try {
                    $('#tblMessageContainer').remove();
                    $('#divModalBackground').remove();
                    if (YesCallBack != null) {
                        YesCallBack();
                    }
                } catch (err) { alert(err.Message); }
            });
            $('#btnMessageNo').unbind('click').click(function () {
                $('#tblMessageContainer').remove();
                $('#divModalBackground').remove();
                if (NoCallBack != null) {
                    NoCallBack();
                }
            });
            break;
        case PopupButtonType.DoneCancel:
            $('#btnMessageDone').unbind('click').click(function () {
                try {
                    $('#tblMessageContainer').remove();
                    $('#divModalBackground').remove();
                    if (DoneCallBack != null) {
                        DoneCallBack();
                    }
                } catch (err) { alert(err.Message); }
            });
            $('#btnMessageCancel').unbind('click').click(function () {
                try {
                    $('#tblMessageContainer').remove();
                    $('#divModalBackground').remove();
                    if (CancelCallBack != null) {
                        CancelCallBack();
                    }
                } catch (err) { alert(err.Message); }
            });
            break;
        default:
            throw new Error("Popup Button Type not found");
    }

    $('#divModalBackground').addClass('ModalBackground');
    $('#tblMessageContainer').addClass('MessageDiv');
    //$('#tblMessage').addClass('MessageTable');
    $('#tblMessage').centerMessageBox();
    $('#tblMessage').draggable({ handle: 'thead' });

    switch (PopupButton) {
        case PopupButtonType.NONE:
            break;
        case PopupButtonType.OK:
            $('#btnMessageOK').focus();
            break;
        case PopupButtonType.OKCancel:
            $('#btnMessageOK').focus();
            break;
        case PopupButtonType.YesNo:
            $('#btnMessageYes').focus();
            break;
        case PopupButtonType.DoneCancel:
            $('#btnMessageDone').focus();
            break;
        default:
            throw new Error("Popup Button Type not found");
    }

    return;
}

function ClosePopup() {
    $('#tblMessageContainer').remove();
    $('#divModalBackground').remove();
}

(function (exports) {
    var popup = function (content, title, buttons, hidden, noClose, width, height) {
        var $this = this,
            $el = $('<div class="MessageDiv1"><table class="MessageTable"><thead><tr><th class="popUpTitle"></th><th class="close" style="width:1px;"></th></tr></thead><tbody><tr><td class="popUpContent" colspan="2"></td></tr><tr><td class="popUpButtons" colspan="2"></td></tr></tbody></table></div>');

        this.render = function () {
            var button, cl;
            if (width) {
                $el.find('.MessageTable').css('width', width);
            }
            if (height) {
                $el.find('.MessageTable').css('height', height);
            }
            $el.find(".popUpTitle").text(title);
            // $el.draggable({ handle: 'thead' });
            cl = $el.find(".close").append("<span style='font-size: 23px;cursor: default;'>&times;</span>");
            cl.click(this.close);
            $el.find(".popUpContent").html(content);
            if (buttons) {
                $.each(buttons, function (key, val) {
                    button = $("<input type='button' class='btn submit' value='" + key + "'/>");
                    $.each(val, function (k, v) {
                        if (k !== "action")
                            button.attr(k, v);
                    });
                    button.click(function () {
                        val.action.apply($this, arguments);
                    });
                    $el.find(".popUpButtons").append(button);
                });
            }
            if (!noClose) {
                button = $("<input type='button' class='btn clear' value='Close'/>");
                button.click(this.close);
                $el.find(".popUpButtons").append(button);
            }
            $("body").append($el);
            if (!hidden) $el.fadeIn(400);
        };

        this.close = function () {
            //            $el.addClass('animated bounceOutUp')
            //                .one('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', function() {
            //                    $(this).removeClass('animated bounceOutUp').remove();
            //                }).remove();
            $el.fadeOut(400, function () {
                $(this).remove();
            });
        };

        this.render();

        this.show = function () {
            //            $el.addClass('animated bounceInDown').fadeIn(400, function() {
            //                $(this).one('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', function() {
            //                    $(this).removeClass('animated bounceInDown');
            //                });
            //            });
            if (!$el.is(':visible'))
                $el.fadeIn(400);
        };

        this.center = function () {
        };

        return {
            elem: $el,
            center: this.center,
            show: this.show,
            close: this.close
        };
    };
    exports.PopUpBox = popup;
})(window);